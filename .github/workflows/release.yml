name: Release

on:
  push:
    tags:
      - 'v*.*.*' # –¢—Ä–∏–≥–≥–µ—Ä –Ω–∞ —Å–µ–º–∞–Ω—Ç–∏—á–µ—Å–∫–∏–µ –≤–µ—Ä—Å–∏–∏ (v1.0.0, v2.1.3, etc.)

jobs:
  # –°–æ–∑–¥–∞–Ω–∏–µ —Ä–µ–ª–∏–∑–∞
  release:
    name: üöÄ Create Release
    runs-on: ubuntu-latest
    permissions:
      contents: write
      pull-requests: write
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # –ù—É–∂–Ω–æ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ changelog

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=${GITHUB_REF#refs/tags/}" >> $GITHUB_OUTPUT

      - name: Verify version consistency
        run: |
          PACKAGE_VERSION=$(node -p "require('./package.json').version")
          if [ "$PACKAGE_VERSION" != "${{ steps.version.outputs.version }}" ]; then
            echo "‚ùå Version mismatch: package.json ($PACKAGE_VERSION) != tag (${{ steps.version.outputs.version }})"
            exit 1
          fi
          echo "‚úÖ Version consistency verified: $PACKAGE_VERSION"

      - name: Run tests
        run: npm test

      - name: Build production
        run: npm run build

      - name: Run security audit
        run: npm audit --audit-level=high

      - name: Create release package
        run: |
          cd dist
          zip -r ../pixel-perfect-extension-${{ steps.version.outputs.tag }}.zip ./*
          cd ..

          # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ —Å –∏—Å—Ö–æ–¥–Ω—ã–º –∫–æ–¥–æ–º –¥–ª—è Chrome Web Store
          zip -r pixel-perfect-extension-source-${{ steps.version.outputs.tag }}.zip \
            src/ public/ *.json *.js *.ts *.md \
            --exclude="*.log" --exclude="node_modules/*" --exclude="dist/*"

      - name: Generate changelog
        id: changelog
        run: |
          # –ü—Ä–æ—Å—Ç–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è changelog –∏–∑ –∫–æ–º–º–∏—Ç–æ–≤ –º–µ–∂–¥—É —Ç–µ–≥–∞–º–∏
          PREVIOUS_TAG=$(git tag --sort=-version:refname | sed -n '2p')
          if [ -z "$PREVIOUS_TAG" ]; then
            PREVIOUS_TAG=$(git rev-list --max-parents=0 HEAD)
          fi

          echo "## üéâ –ß—Ç–æ –Ω–æ–≤–æ–≥–æ –≤ –≤–µ—Ä—Å–∏–∏ ${{ steps.version.outputs.tag }}" > RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          # –ì—Ä—É–ø–ø–∏—Ä–æ–≤–∫–∞ –∫–æ–º–º–∏—Ç–æ–≤ –ø–æ —Ç–∏–ø–∞–º
          echo "### ‚ú® –ù–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏" >> RELEASE_NOTES.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --grep="^feat" >> RELEASE_NOTES.md || echo "- –ù–µ—Ç –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üêõ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—à–∏–±–æ–∫" >> RELEASE_NOTES.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --grep="^fix" >> RELEASE_NOTES.md || echo "- –ù–µ—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–π" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üîß –£–ª—É—á—à–µ–Ω–∏—è" >> RELEASE_NOTES.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --grep="^improve\|^refactor\|^perf" >> RELEASE_NOTES.md || echo "- –ù–µ—Ç —É–ª—É—á—à–µ–Ω–∏–π" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è" >> RELEASE_NOTES.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --grep="^docs" >> RELEASE_NOTES.md || echo "- –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –≤ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏–∏" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å" >> RELEASE_NOTES.md
          git log $PREVIOUS_TAG..HEAD --pretty=format:"- %s" --grep="^security" >> RELEASE_NOTES.md || echo "- –ù–µ—Ç –∏–∑–º–µ–Ω–µ–Ω–∏–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üì¶ –¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è" >> RELEASE_NOTES.md
          echo "- **–†–∞–∑–º–µ—Ä —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—è**: $(du -h pixel-perfect-extension-${{ steps.version.outputs.tag }}.zip | cut -f1)" >> RELEASE_NOTES.md
          echo "- **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –±—Ä–∞—É–∑–µ—Ä—ã**: Chrome 88+, Edge 88+" >> RELEASE_NOTES.md
          echo "- **–í–µ—Ä—Å–∏—è Node.js –¥–ª—è —Å–±–æ—Ä–∫–∏**: $(node --version)" >> RELEASE_NOTES.md
          echo "- **–î–∞—Ç–∞ —Å–±–æ—Ä–∫–∏**: $(date -u +'%Y-%m-%d %H:%M:%S UTC')" >> RELEASE_NOTES.md
          echo "" >> RELEASE_NOTES.md

          echo "### üì• –£—Å—Ç–∞–Ω–æ–≤–∫–∞" >> RELEASE_NOTES.md
          echo "1. –°–∫–∞—á–∞–π—Ç–µ \`pixel-perfect-extension-${{ steps.version.outputs.tag }}.zip\`" >> RELEASE_NOTES.md
          echo "2. –†–∞—Å–ø–∞–∫—É–π—Ç–µ –∞—Ä—Ö–∏–≤" >> RELEASE_NOTES.md
          echo "3. –û—Ç–∫—Ä–æ–π—Ç–µ Chrome: \`chrome://extensions/\`" >> RELEASE_NOTES.md
          echo "4. –í–∫–ª—é—á–∏—Ç–µ \"–†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫–∞\"" >> RELEASE_NOTES.md
          echo "5. –ù–∞–∂–º–∏—Ç–µ \"–ó–∞–≥—Ä—É–∑–∏—Ç—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω–æ–µ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ\"" >> RELEASE_NOTES.md
          echo "6. –í—ã–±–µ—Ä–∏—Ç–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞–Ω–Ω—É—é –ø–∞–ø–∫—É" >> RELEASE_NOTES.md

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.version.outputs.tag }}
          name: 'Pixel Perfect ${{ steps.version.outputs.tag }}'
          body_path: RELEASE_NOTES.md
          draft: false
          prerelease: ${{ contains(steps.version.outputs.version, '-') }}
          files: |
            pixel-perfect-extension-${{ steps.version.outputs.tag }}.zip
            pixel-perfect-extension-source-${{ steps.version.outputs.tag }}.zip
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-artifacts-${{ steps.version.outputs.tag }}
          path: |
            pixel-perfect-extension-${{ steps.version.outputs.tag }}.zip
            pixel-perfect-extension-source-${{ steps.version.outputs.tag }}.zip
            RELEASE_NOTES.md
          retention-days: 90

  # –°–æ–∑–¥–∞–Ω–∏–µ Pull Request –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤–µ—Ä—Å–∏–∏ (–¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞)
  version-bump:
    name: üìà Prepare Next Version
    runs-on: ubuntu-latest
    needs: release
    if: success()
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Configure git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Extract current version
        id: current_version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

      - name: Calculate next version
        id: next_version
        run: |
          CURRENT="${{ steps.current_version.outputs.version }}"

          # –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º patch –≤–µ—Ä—Å–∏—é –¥–ª—è —Å–ª–µ–¥—É—é—â–µ–≥–æ —Ä–µ–ª–∏–∑–∞
          IFS='.' read -ra ADDR <<< "$CURRENT"
          MAJOR=${ADDR[0]}
          MINOR=${ADDR[1]}
          PATCH=${ADDR[2]}

          NEXT_PATCH=$((PATCH + 1))
          NEXT_VERSION="$MAJOR.$MINOR.$NEXT_PATCH"

          echo "next_version=$NEXT_VERSION" >> $GITHUB_OUTPUT

      - name: Create version bump branch
        run: |
          git checkout -b release/prepare-v${{ steps.next_version.outputs.next_version }}

      - name: Update package.json version
        run: |
          npm version ${{ steps.next_version.outputs.next_version }} --no-git-tag-version

      - name: Update manifest.json version
        run: |
          jq --arg version "${{ steps.next_version.outputs.next_version }}" \
             '.version = $version' \
             manifest.json > manifest.tmp.json
          mv manifest.tmp.json manifest.json

      - name: Commit changes
        run: |
          git add package.json package-lock.json manifest.json
          git commit -m "chore: bump version to ${{ steps.next_version.outputs.next_version }}"
          git push origin release/prepare-v${{ steps.next_version.outputs.next_version }}

      - name: Create Pull Request
        uses: repo-sync/pull-request@v2
        with:
          source_branch: 'release/prepare-v${{ steps.next_version.outputs.next_version }}'
          destination_branch: 'main'
          pr_title: 'üîÑ Prepare version ${{ steps.next_version.outputs.next_version }}'
          pr_body: |
            ## üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∫ —Å–ª–µ–¥—É—é—â–µ–º—É —Ä–µ–ª–∏–∑—É

            –≠—Ç–æ—Ç PR –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ —Å–æ–∑–¥–∞–Ω –ø–æ—Å–ª–µ —Ä–µ–ª–∏–∑–∞ –≤–µ—Ä—Å–∏–∏ ${{ steps.current_version.outputs.version }}.

            ### –ò–∑–º–µ–Ω–µ–Ω–∏—è:
            - ‚¨ÜÔ∏è –í–µ—Ä—Å–∏—è –≤ `package.json`: `${{ steps.next_version.outputs.next_version }}`
            - ‚¨ÜÔ∏è –í–µ—Ä—Å–∏—è –≤ `manifest.json`: `${{ steps.next_version.outputs.next_version }}`

            ### –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:
            1. –ü—Ä–æ—Å–º–æ—Ç—Ä–∏—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            2. –ü—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –¥–æ–±–∞–≤—å—Ç–µ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è
            3. Merge —ç—Ç–æ—Ç PR
            4. –ù–∞—á–∏–Ω–∞–π—Ç–µ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫—É –Ω–æ–≤—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π!

            > ü§ñ –°–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ GitHub Action
          github_token: ${{ secrets.GITHUB_TOKEN }}
